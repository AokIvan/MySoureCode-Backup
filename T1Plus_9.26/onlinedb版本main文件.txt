#include <stdbool.h>
#include <stdio.h>
#include "stdlib.h"

#define ERROR -1

typedef int ElementType;
typedef struct LNode *PtrToLNode;
typedef PtrToLNode Position;
typedef PtrToLNode List;

struct LNode{
    ElementType Data;
    PtrToLNode Next;
};

int Length(List L){
    Position p;
    int cnt = 0;
    p = L;
    while(p){
        p = p->Next;
        cnt++;
    }
    return cnt;
}

ElementType FindKth(List L, int K){
    Position p;
    int cnt = 1;
    p = L;
    while (p && cnt<K){
        p = p->Next;
        cnt++;
    }
    if((cnt == K) && p){
        return p->Data;}
    else{
        return ERROR;}
}

bool Insert(List L, ElementType X, int i){
    Position tmp,pre;
    int cnt = 0;

    pre = L;
    while(pre && cnt<i-1){
        pre = pre->Next;
        cnt++;
    }
    if(pre==NULL || cnt!=i-1){
        printf("插入位置参数错误\n");
        return false;
    }
    else{
        tmp = (Position)malloc(sizeof(struct LNode));
        tmp->Data=X;
        tmp->Next=pre->Next;
        pre->Next=tmp;
        return true;
    }
}

bool Delete(List L, int i){
    Position tmp, pre;
    int cnt = 0;

    pre = L;
    while (pre && cnt<i-1){
        pre = pre->Next;
        cnt++;
    }
    if(pre==NULL || cnt!=i-1 || pre->Next==NULL){
        printf("删除位置参数错误\n");
        return false;
    }
    else{
        tmp = pre->Next;
        pre->Next = tmp->Next;
        free(tmp);
        return true;
    }
}

void PrintList(List L){                      //打印链表所有内容
    Position p;
    p = L;
    printf("表长：%d\n", Length(L));
    printf("当前数组内容: ");
    while(p){
        printf(" — %d — ",p->Data);
        p = p->Next;
    }
    printf("\n");
}

List MakeEmpty(){
    List L;
    L = (List)malloc(sizeof(struct LNode));
    return L;
}

int main(){
    List L = MakeEmpty();
    int i;
    PrintList(L);
    printf("///依次插入5组数据中...///\n");
    for(i=1;i<=5;i++){Insert(L,i,i);}
    PrintList(L);
    return 1;
}